/*
 * JPanelLegend.java
 *
 * Created on 22 de febrero de 2008, 15:36
 */

package org.orbisgis.geoview.cui.gui;

import java.awt.CardLayout;
import java.awt.Component;
import java.net.URL;
import java.util.ArrayList;

import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListModel;

import org.orbisgis.geoview.cui.gui.widgets.JPanelComboLegendPicker;
import org.orbisgis.geoview.renderer.legend.IntervalLegend;
import org.orbisgis.geoview.renderer.legend.LabelLegend;
import org.orbisgis.geoview.renderer.legend.Legend;
import org.orbisgis.geoview.renderer.legend.ProportionalLegend;
import org.orbisgis.geoview.renderer.legend.UniqueSymbolLegend;
import org.orbisgis.geoview.renderer.legend.UniqueValueLegend;
import org.sif.UIFactory;
import org.sif.UIPanel;


/**
 *
 * @author  david
 */
public class JPanelLegend extends javax.swing.JPanel implements UIPanel {

	String infoText="Legend";
	String title="legend";
	ArrayList<ILegendPanelUI> paneles = null;
	int constraint;
	Legend[] legendC = null;

    /** Creates new form JPanelLegend
     *
     *  @param paneles is the list of the possible panels that you could
     *  open.
     *  @param nombres is the list of names of the panes that you have in
     *  the actual layer. This panel names will be shown on the left list.
     *
     */

    public JPanelLegend( int geomConstraint, Legend[] leg ) {
    	this.constraint=geomConstraint;
    	this.legendC=leg;
        initComponents();
        getPanels();
        fillPanels(  );
        fillList(  );
        enableButtons(false);
    }

    private void getPanels() {
    	ArrayList<ILegendPanelUI>listPanels=new ArrayList<ILegendPanelUI>();
    	Legend legendArr [] = this.legendC;

		for (int i=0; i<legendArr.length; i++){
			Legend legend = legendArr[i];
			if (legend instanceof UniqueSymbolLegend) {
				UniqueSymbolLegend tLegend = (UniqueSymbolLegend) legend;
				System.out.println(tLegend.getName());
				JPanelUniqueSymbolLegend sl = new JPanelUniqueSymbolLegend(tLegend, constraint);
				listPanels.add(sl);
			}
			if (legend instanceof IntervalLegend) {
				IntervalLegend tLegend = (IntervalLegend) legend;
				JPanelIntervalClassifiedLegend sl = new JPanelIntervalClassifiedLegend(tLegend, constraint);
				listPanels.add(sl);

			}
			if (legend instanceof LabelLegend) {
				LabelLegend tLegend = (LabelLegend) legend;

			}
			if (legend instanceof ProportionalLegend) {
				ProportionalLegend tLegend = (ProportionalLegend) legend;
				JPanelProportionalLegend prop = new JPanelProportionalLegend(tLegend, constraint);
				listPanels.add(prop);

			}
			if (legend instanceof UniqueValueLegend) {
				UniqueValueLegend tLegend = (UniqueValueLegend) legend;
				JPanelUniqueValueLegend us = new JPanelUniqueValueLegend(tLegend, constraint);
				listPanels.add(us);

			}
		}

		this.paneles=listPanels;


	}

	/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        jButtonMenuUp = new javax.swing.JButton();
        jButtonMenuDown = new javax.swing.JButton();
        jButtonMenuAdd = new javax.swing.JButton();
        jButtonMenuDel = new javax.swing.JButton();
        jButtonMenuRename = new javax.swing.JButton();
        jButtonManageSymbolCollection = new javax.swing.JButton();

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 499, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 346, Short.MAX_VALUE)
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jCheckBox1.setText("Only show layer when scale is between");
        jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Minium scale 1:");

        jLabel2.setText("Maxium scale 1:");

        jTextField1.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jButton1.setText("Current scale");

        jButton2.setText("Current scale");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField2)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jToolBar1.setFloatable(false);
        jButtonMenuUp.setText("up");
        jButtonMenuUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMenuUpActionPerformed(evt);
            }
        });

        jToolBar1.add(jButtonMenuUp);

        jButtonMenuDown.setText("down");
        jButtonMenuDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMenuDownActionPerformed(evt);
            }
        });

        jToolBar1.add(jButtonMenuDown);

        jButtonMenuAdd.setText("add");
        jButtonMenuAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMenuAddActionPerformed(evt);
            }
        });

        jToolBar1.add(jButtonMenuAdd);

        jButtonMenuDel.setText("del");
        jButtonMenuDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMenuDelActionPerformed(evt);
            }
        });

        jToolBar1.add(jButtonMenuDel);

        jButtonMenuRename.setText("rename");
        jButtonMenuRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMenuRenameActionPerformed(evt);
            }
        });

        jToolBar1.add(jButtonMenuRename);

        jButtonManageSymbolCollection.setText("Manage symbol collection");
        jButtonManageSymbolCollection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonManageSymbolCollectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonManageSymbolCollection, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonManageSymbolCollection))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonManageSymbolCollectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonManageSymbolCollectionActionPerformed
        JPanelSymbolCollection symbolColl = new JPanelSymbolCollection(constraint);
        if (UIFactory.showDialog(symbolColl)){
            System.out.println("simbolo");
        }
    }//GEN-LAST:event_jButtonManageSymbolCollectionActionPerformed

    private void jButtonMenuRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMenuRenameActionPerformed
        DefaultListModel mod = (DefaultListModel)jList1.getModel();
    	String nombre=(String)jList1.getSelectedValue();
    	int idx=jList1.getSelectedIndex();
    	mod.remove(idx);

        //TODO show a "select name" pane"
        //TODO Change the name in the pane

        mod.add(idx, "New Name");
    }//GEN-LAST:event_jButtonMenuRenameActionPerformed

    private void jButtonMenuDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMenuDelActionPerformed
    	DefaultListModel mod = (DefaultListModel)jList1.getModel();
    	String nombre=(String)jList1.getSelectedValue();
    	int idx=jList1.getSelectedIndex();
    	mod.remove(idx);

    	int count=jPanel2.getComponentCount();
    	for (int i=0; i<count; i++){
    		Component com = jPanel2.getComponent(i);
    		ILegendPanelUI pan = (ILegendPanelUI)com;
    		if (pan.toString().equals(nombre)){
    			jPanel2.remove(com);
    			break;
    		}
    	}

        if (mod.getSize()>0){
            jList1.setSelectedIndex(idx);
            if (idx==0){
            	jButtonMenuUp.setEnabled(false);
            	jButtonMenuDel.setEnabled(true);
            	jButtonMenuDown.setEnabled(true);
            	jButtonMenuRename.setEnabled(true);
            }else{
            	if (idx==mod.getSize()-1){
            		jButtonMenuUp.setEnabled(true);
                	jButtonMenuDel.setEnabled(false);
                	jButtonMenuDown.setEnabled(true);
                	jButtonMenuRename.setEnabled(true);
            	}
            }

            if (mod.getSize()==1){
            	jButtonMenuUp.setEnabled(false);
            	jButtonMenuDown.setEnabled(false);
            }
        }else{
        	jButtonMenuDel.setEnabled(false);
        	jButtonMenuDown.setEnabled(false);
        	jButtonMenuRename.setEnabled(false);
        	jButtonMenuUp.setEnabled(false);
        }
    }//GEN-LAST:event_jButtonMenuDelActionPerformed

    private void jButtonMenuAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMenuAddActionPerformed
    	//get de names of the available panels
    	ArrayList<String> paneNames = new ArrayList<String>();
    	paneNames.add("Unique symbol legend");
    	paneNames.add("Unique value legend");
    	paneNames.add("Interval classified legend");
    	paneNames.add("Proportional legend");
    	//show the combo legend picker
    	JPanelComboLegendPicker legendPicker = new JPanelComboLegendPicker(paneNames.toArray());

    	if (!UIFactory.showDialog(legendPicker)){
    		return;
    	}

    	String value=legendPicker.getSelected();
    	String nombre=legendPicker.getSelectedName();

    	if (nombre.equals("")){
    		return;
    	}

    	//set the selected panel into the jlist
    	ListModel mod = jList1.getModel();
    	int tam=mod.getSize();
    	for (int i=0; i<tam; i++){
    		if (((String)mod.getElementAt(i)).equals(nombre)){
    			JOptionPane.showMessageDialog(this, "Oops!! the name already exists");
    			return;
    		}
    	}

    	((DefaultListModel)mod).addElement(nombre);

    	//create the panel and insert in the cardlayout
    	ILegendPanelUI pane=null;
    	if (value.equals("Unique symbol legend")){
    		pane=new JPanelUniqueSymbolLegend(constraint);
    		pane.setIdentity(nombre);
    	}
    	if (value.equals("Unique value legend")){
    		pane=new JPanelUniqueValueLegend(constraint);
    		pane.setIdentity(nombre);
    	}
    	if (value.equals("Interval classified legend")){
    		pane=new JPanelIntervalClassifiedLegend(constraint);
    		pane.setIdentity(nombre);
    	}
    	if (value.equals("Proportional legend")){
    		pane=new JPanelProportionalLegend(constraint);
    		pane.setIdentity(nombre);
    	}
    	jPanel2.add(pane.toString(), pane.getComponent());

    	( (CardLayout)jPanel2.getLayout() ).show( jPanel2, nombre );

    	jPanel2.validate();
    	jPanel2.repaint();

    	jList1.setSelectedValue(nombre, true);

    	jButtonMenuDel.setEnabled(true);

    	jButtonMenuRename.setEnabled(true);


    	if (mod.getSize()==1){
    		jButtonMenuUp.setEnabled(false);
    		jButtonMenuDown.setEnabled(false);
    	}else{
    		jButtonMenuUp.setEnabled(true);
    		jButtonMenuDown.setEnabled(false);
    	}

    }//GEN-LAST:event_jButtonMenuAddActionPerformed

    private void jButtonMenuDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMenuDownActionPerformed
    	DefaultListModel mod = (DefaultListModel)jList1.getModel();
    	int idx=0;
    	idx=jList1.getSelectedIndex();
    	System.out.println(idx);
    	if (idx<mod.size()-1){
    		String element=(String)mod.get(idx);
    		mod.remove(idx);
    		mod.add(idx+1, element);
    	}
    	jList1.setSelectedIndex(idx+1);

    	jButtonMenuUp.setEnabled(true);

    	if (idx+1==mod.getSize()-1){
    		jButtonMenuDown.setEnabled(false);
    	}
    }//GEN-LAST:event_jButtonMenuDownActionPerformed

    private void jButtonMenuUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMenuUpActionPerformed
    	DefaultListModel mod = (DefaultListModel)jList1.getModel();
    	int idx=0;
    	idx=jList1.getSelectedIndex();
    	System.out.println(idx);
    	if (idx>0){
    		String element=(String)mod.get(idx);
    		mod.remove(idx);
    		mod.add(idx-1, element);
    	}
    	jList1.setSelectedIndex(idx-1);
    	if (idx-1==0){
    		jButtonMenuUp.setEnabled(false);
    	}

    	jButtonMenuDown.setEnabled(true);

    }//GEN-LAST:event_jButtonMenuUpActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isSelected()){
            enableButtons(true);
        }else{
            enableButtons(false);
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed


    private void enableButtons(boolean enabled) {
		jTextField1.setEnabled(enabled);
		jTextField2.setEnabled(enabled);
		jButton1.setEnabled(enabled);
		jButton2.setEnabled(enabled);
	}

	private void fillList( ) {
        jList1 = new JList();
        DefaultListModel mod = new DefaultListModel();
        for (int i=0; i<paneles.size(); i++)
        	mod.addElement(((ILegendPanelUI)paneles.get(i)).toString());
        jList1.setModel(mod);
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);
        jScrollPane1.validate();
        jScrollPane1.repaint();
        if (jList1.getModel().getSize()>0){
        	if (jList1.getModel().getSize()==1){
        		jButtonMenuUp.setEnabled(false);
        		jButtonMenuDown.setEnabled(false);
        	}
            jList1.setSelectedIndex(0);
        }
        else{
        	jButtonMenuDel.setEnabled(false);
        	jButtonMenuDown.setEnabled(false);
        	jButtonMenuRename.setEnabled(false);
        	jButtonMenuUp.setEnabled(false);

        }
    }

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt){
        String whatPanel = (String) jList1.getSelectedValue();
        ( (CardLayout)jPanel2.getLayout() ).show( jPanel2,whatPanel );

        ListModel mod = jList1.getModel();
        int idx = jList1.getSelectedIndex();

        if (mod.getSize()>0)
        	jButtonMenuDel.setEnabled(true);

        if (idx==0){
        	jButtonMenuUp.setEnabled(false);
        	jButtonMenuDown.setEnabled(true);
        }

        if (idx==mod.getSize()-1){
        	jButtonMenuUp.setEnabled(true);
        	jButtonMenuDown.setEnabled(false);
        }

        if (mod.getSize()==1){
        	jButtonMenuUp.setEnabled(false);
        	jButtonMenuDown.setEnabled(false);
        }

    }


    private void fillPanels (){
        jPanel2.setLayout(new CardLayout());
//        JPanelVoid panelVoid=new JPanelVoid();
//        jPanel2.add("noPanel", panelVoid);
//        ( (CardLayout)jPanel2.getLayout() ).show( jPanel2, "noPanel" );
    	jPanel2.validate();
    	jPanel2.repaint();
        for (int i=0; i<paneles.size(); i++){
            jPanel2.add(paneles.get(i).toString(), (paneles.get(i)).getComponent());
        }
    }

    private javax.swing.JList jList1;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonManageSymbolCollection;
    private javax.swing.JButton jButtonMenuAdd;
    private javax.swing.JButton jButtonMenuDel;
    private javax.swing.JButton jButtonMenuDown;
    private javax.swing.JButton jButtonMenuRename;
    private javax.swing.JButton jButtonMenuUp;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
	public Component getComponent() {
		// TODO Auto-generated method stub
		return this;
	}

	public URL getIconURL() {
		// TODO Auto-generated method stub
		return null;
	}

	public String getInfoText() {
		// TODO Auto-generated method stub
		return infoText;
	}

	public String getTitle() {
		// TODO Auto-generated method stub
		return title;
	}

	public String initialize() {
		// TODO Auto-generated method stub
		return null;
	}

	public String postProcess() {
		// TODO Auto-generated method stub
		return null;
	}

	public String validateInput() {
		// TODO Auto-generated method stub
		return null;
	}

	public Legend[] getLegend(){

		ArrayList<Legend>legends = new ArrayList<Legend>();
		Component[] com=jPanel2.getComponents();

		for (int i=0; i<com.length; i++){
			Component comp = com[i];
			if ((comp instanceof ILegendPanelUI) && !(comp instanceof JPanelVoid)) {
				ILegendPanelUI jp = (ILegendPanelUI) comp;
				Legend leg=jp.getLegend();
				legends.add(leg);
			}


		}
		Legend[] legendsL = new Legend[legends.size()];
		for (int j=0; j<legendsL.length; j++){
			legendsL[j]=legends.get(j);
		}

		return legendsL;
	}
}
