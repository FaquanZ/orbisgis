/**
 * OrbisGIS is a GIS application dedicated to scientific spatial simulation.
 * This cross-platform GIS is developed at French IRSTV institute and is able to
 * manipulate and create vector and raster spatial information.
 *
 * OrbisGIS is distributed under GPL 3 license. It is produced by the "Atelier SIG"
 * team of the IRSTV Institute <http://www.irstv.fr/> CNRS FR 2488.
 *
 * Copyright (C) 2007-1012 IRSTV (FR CNRS 2488)
 *
 * This file is part of OrbisGIS.
 *
 * OrbisGIS is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * OrbisGIS is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * OrbisGIS. If not, see <http://www.gnu.org/licenses/>.
 *
 * For more information, please consult: <http://www.orbisgis.org/>
 * or contact directly:
 * info_at_ orbisgis.org
 */
/* Generated By:JavaCC: Do not edit this line. JJTJavaParserState.java Version 4.1 */
package org.orbisgis.core.ui.plugins.views.beanShellConsole.javaManager.parser;

public class JJTJavaParserState {
	private java.util.List nodes;
	private java.util.List marks;

	private int sp; // number of nodes on stack
	private int mk; // current mark
	private boolean node_created;

	public JJTJavaParserState() {
		nodes = new java.util.ArrayList();
		marks = new java.util.ArrayList();
		sp = 0;
		mk = 0;
	}

	/*
	 * Determines whether the current node was actually closed and pushed. This
	 * should only be called in the final user action of a node scope.
	 */
	public boolean nodeCreated() {
		return node_created;
	}

	/*
	 * Call this to reinitialize the node stack. It is called automatically by
	 * the parser's ReInit() method.
	 */
	public void reset() {
		nodes.clear();
		marks.clear();
		sp = 0;
		mk = 0;
	}

	/*
	 * Returns the root node of the AST. It only makes sense to call this after
	 * a successful parse.
	 */
	public Node rootNode() {
		return (Node) nodes.get(0);
	}

	/* Pushes a node on to the stack. */
	public void pushNode(Node n) {
		nodes.add(n);
		++sp;
	}

	/*
	 * Returns the node on the top of the stack, and remove it from the stack.
	 */
	public Node popNode() {
		if (--sp < mk) {
			mk = ((Integer) marks.remove(marks.size() - 1)).intValue();
		}
		return (Node) nodes.remove(nodes.size() - 1);
	}

	/* Returns the node currently on the top of the stack. */
	public Node peekNode() {
		return (Node) nodes.get(nodes.size() - 1);
	}

	/*
	 * Returns the number of children on the stack in the current node scope.
	 */
	public int nodeArity() {
		return sp - mk;
	}

	public void clearNodeScope(Node n) {
		while (sp > mk) {
			popNode();
		}
		mk = ((Integer) marks.remove(marks.size() - 1)).intValue();
	}

	public void openNodeScope(Node n) {
		marks.add(new Integer(mk));
		mk = sp;
		n.jjtOpen();
	}

	/*
	 * A definite node is constructed from a specified number of children. That
	 * number of nodes are popped from the stack and made the children of the
	 * definite node. Then the definite node is pushed on to the stack.
	 */
	public void closeNodeScope(Node n, int num) {
		mk = ((Integer) marks.remove(marks.size() - 1)).intValue();
		while (num-- > 0) {
			Node c = popNode();
			c.jjtSetParent(n);
			n.jjtAddChild(c, num);
		}
		n.jjtClose();
		pushNode(n);
		node_created = true;
	}

	/*
	 * A conditional node is constructed if its condition is true. All the nodes
	 * that have been pushed since the node was opened are made children of the
	 * conditional node, which is then pushed on to the stack. If the condition
	 * is false the node is not constructed and they are left on the stack.
	 */
	public void closeNodeScope(Node n, boolean condition) {
		if (condition) {
			int a = nodeArity();
			mk = ((Integer) marks.remove(marks.size() - 1)).intValue();
			while (a-- > 0) {
				Node c = popNode();
				c.jjtSetParent(n);
				n.jjtAddChild(c, a);
			}
			n.jjtClose();
			pushNode(n);
			node_created = true;
		} else {
			mk = ((Integer) marks.remove(marks.size() - 1)).intValue();
			node_created = false;
		}
	}
}
/*
 * JavaCC - OriginalChecksum=0fa949ab46734ddcfe6d6c164ee5972f (do not edit this
 * line)
 */
