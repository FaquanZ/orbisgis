<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema targetNamespace="http://www.opengis.net/se"
  xmlns:se="http://www.opengis.net/se"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
  <xsd:include schemaLocation="Function.xsd"/>
  <xsd:include schemaLocation="common.xsd"/>
  <xsd:import namespace="http://www.opengis.net/ogc"
    schemaLocation="../../filter/1.1.0/filter.xsd"/>

  <!-- ********************************************************************* -->
  <xsd:annotation>
    <xsd:documentation>SE Symbolizer version 1.1.20 (2009-04-17)</xsd:documentation>
  </xsd:annotation>
  <xsd:element name="Symbolizer" type="se:SymbolizerType" abstract="true"/>
  <xsd:complexType name="SymbolizerType" abstract="true">
    <xsd:annotation>
      <xsd:documentation>A "SymbolizerType" is an abstract type for encoding the graphical properties used to portray geographic information.  Concrete Symbolizer types are derived from this base type.</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ref="se:Version" minOccurs="0"/>
      <xsd:element ref="se:Name" minOccurs="0"/>
      <xsd:element ref="se:Description" minOccurs="0"/>
      <!--<xsd:element ref="se:LegendGraphic" minOccurs="0"/>-->
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="LegendGraphic" type="se:LegendGraphicType"/>
  <xsd:complexType name="LegendGraphicType">
    <xsd:sequence>
      <xsd:element ref="se:Graphic"/>
    </xsd:sequence>
  </xsd:complexType>

  <!-- ********************************************************************* -->
  <xsd:element name="ArgumentList" type="se:ArgumentListType"/>
  <xsd:complexType name="ArgumentListType">
    <xsd:sequence>
      <xsd:element ref="se:Argument" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="Argument" type="se:ArgumentType"/>
  <xsd:complexType name="ArgumentType">
    <xsd:sequence>
      <xsd:element ref="se:Name"/>
      <xsd:element ref="se:Description" minOccurs="0"/>
      <xsd:element ref="se:Value"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="Value" type="se:ParameterValueType"/>

  <xsd:element name="FormalParameters" type="se:FormalParametersType"/>
  <xsd:complexType name="FormalParametersType">
    <xsd:sequence>
      <xsd:element ref="se:Parameter" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="Parameter" type="se:ParameterType"/>
  <xsd:complexType name="ParameterType">
    <xsd:sequence>
      <xsd:element ref="se:Name"/>
      <xsd:element ref="se:Description" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <!-- ********************************************************************* -->
  <xsd:complexType name="ParameterValueType" mixed="true">
    <xsd:annotation>
      <xsd:documentation>The "ParameterValueType" uses OGC-Filter expressions to give values for SE graphic parameters.  A "mixed" element-content model is used, but values are restricted to being either a Filter expression or a literal value.</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence minOccurs="0">
      <xsd:element ref="ogc:expression"/>
    </xsd:sequence>
  </xsd:complexType>


  <!-- ********************************************************************* 
  <xsd:element name="ParametrizedSymbolizer" type="se:ParametrizedSymbolizerType">
    <xsd:annotation>
      <xsd:documentation>TODO blbla ArgumentsList for default value ? </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ParametrizedSymbolizerType">
    <xsd:complexContent>
      <xsd:sequence>
        <xsd:element ref="se:FormalParameters" minOccurs="0"/>
        <xsd:element ref="se:ArgumentsList" minOccurs="0"/>
        <xsd:element ref="se:Symbolizer"/>
      </xsd:sequence>
    </xsd:complexContent>
  </xsd:complexType>
  -->


  <!-- *********************************************************************
  <xsd:element name="SymbolizerReference" type="se:SymbolizerReferenceType"
    substitutionGroup="se:Symbolizer">
    <xsd:annotation>
      <xsd:documentation>A "SymbolizerReference" refers to a remote Symbolizer XML document whose body is to be substituted in place of the reference when processed.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SymbolizerReferenceType">
    <xsd:complexContent>
      <xsd:extension base="se:SymbolizerType">
        <xsd:sequence>
          <xsd:element ref="se:OnlineResource"/>
          <xsd:element ref="se:ArgumentList" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  -->

  <!-- ********************************************************************* -->
  <xsd:element name="CompositeSymbolizer" type="se:CompositeSymbolizerType"
    substitutionGroup="se:Symbolizer">
    <xsd:annotation>
      <xsd:documentation>A "CompositeSymbolizer" comprises a group of Symbolizers into a single object.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CompositeSymbolizerType">
    <xsd:complexContent>
      <xsd:extension base="se:SymbolizerType">
        <xsd:sequence>
          <xsd:element ref="se:Symbolizer" maxOccurs="unbounded"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ********************************************************************* -->
  <xsd:annotation>
    <xsd:documentation>LINE Symbolizer</xsd:documentation>
  </xsd:annotation>
  <xsd:element name="LineSymbolizer" type="se:LineSymbolizerType"
    substitutionGroup="se:Symbolizer">
    <xsd:annotation>
      <xsd:documentation>A LineSymbolizer is used to render a "stroke" along a linear geometry.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LineSymbolizerType">
    <xsd:complexContent>
      <xsd:extension base="se:SymbolizerType">
        <xsd:sequence>
          <xsd:element ref="se:Geometry" minOccurs="0"/>
          <xsd:element ref="se:UnitOfMeasure" minOccurs="0"/>
          <xsd:element ref="se:PerpendicularOffset" minOccurs="0"/>
          <xsd:element ref="se:Transform" minOccurs="0"/>
          <xsd:element ref="se:Stroke" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="UnitOfMeasure" type="xsd:anyURI"/>
  <xsd:element name="PerpendicularOffset" type="se:ParameterValueType"/>

  <!-- ********************************************************************* -->
  <xsd:element name="Geometry" type="se:GeometryType">
    <xsd:annotation>
      <xsd:documentation>A Geometry gives reference to a (the) geometry property of a feature or a general geometry expression to be used for rendering.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="GeometryType">
    <xsd:sequence>
      <xsd:element ref="ogc:expression"/>
    </xsd:sequence>
  </xsd:complexType>

  <!-- ********************************************************************* -->
  <xsd:element name="Transform" type="se:TransformType">
    <xsd:annotation>
      <xsd:documentation>A Transform provides an affine transformation to a geometry or graphic elements.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TransformType">
    <xsd:sequence>
      <xsd:choice minOccurs="1" maxOccurs="unbounded">
        <xsd:element ref="se:Translate" minOccurs="0"/>
        <xsd:element ref="se:Rotate" minOccurs="0"/>
        <xsd:element ref="se:Scale" minOccurs="0"/>
        <xsd:element ref="se:Matrix" minOccurs="0"/>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="Translate" type="se:TranslateType"/>
  <xsd:complexType name="TranslateType">
    <xsd:sequence>
      <xsd:element ref="se:X"/>
      <xsd:element ref="se:Y" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="X" type="se:ParameterValueType"/>
  <xsd:element name="Y" type="se:ParameterValueType"/>
  <xsd:element name="Rotate" type="se:RotateType"/>
  <xsd:complexType name="RotateType">
    <xsd:sequence>
      <xsd:element ref="se:Angle"/>
      <xsd:element ref="se:X" minOccurs="0"/>
      <xsd:element ref="se:Y" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="Angle" type="se:ParameterValueType"/>
  <xsd:element name="Scale" type="se:ScaleType"/>
  <xsd:complexType name="ScaleType">
    <xsd:sequence>
      <xsd:choice>
      <xsd:element ref="se:XY" minOccurs="0"/>
      <xsd:sequence>
        <xsd:element ref="se:X" minOccurs="0"/>
        <xsd:element ref="se:Y" minOccurs="0"/>
      </xsd:sequence>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="XY" type="se:ParameterValueType"/>
  <xsd:element name="Matrix" type="se:MatrixType"/>
  <xsd:complexType name="MatrixType">
    <xsd:sequence>
      <xsd:element ref="se:A" minOccurs="0"/>
      <xsd:element ref="se:B" minOccurs="0"/>
      <xsd:element ref="se:C" minOccurs="0"/>
      <xsd:element ref="se:D" minOccurs="0"/>
      <xsd:element ref="se:E" minOccurs="0"/>
      <xsd:element ref="se:F" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="A" type="se:ParameterValueType"/>
  <xsd:element name="B" type="se:ParameterValueType"/>
  <xsd:element name="C" type="se:ParameterValueType"/>
  <xsd:element name="D" type="se:ParameterValueType"/>
  <xsd:element name="E" type="se:ParameterValueType"/>
  <xsd:element name="F" type="se:ParameterValueType"/>

  <!-- ********************************************************************* -->
  <xsd:element name="Stroke" type="se:StrokeType" abstract="true">
    <xsd:annotation>
      <xsd:documentation>A "Stroke" collects the PenStroke, GraphicStroke, CompoundStroke, and StrokeReference elements for specifying the appearance of a lineary geometry.  The definitions parallel SVG strokes.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="StrokeType" abstract="true">
    <xsd:sequence>
      <xsd:element ref="se:UnitOfMeasure" minOccurs="0"/>
      <xsd:element ref="se:PreGap" minOccurs="0"/>
      <xsd:element ref="se:PostGap" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:element name="PreGap" type="se:ParameterValueType"/>
  <xsd:element name="PostGap" type="se:ParameterValueType"/>


  <!-- PenStroke -->
  <xsd:element name="PenStroke" type="se:PenStrokeType"
    substitutionGroup="se:Stroke"/>
  <xsd:complexType name="PenStrokeType">
    <xsd:complexContent>
      <xsd:extension base="se:StrokeType">
        <xsd:sequence>
          <xsd:choice minOccurs="0">
            <xsd:element ref="se:Color"/>
            <xsd:element ref="se:Stipple"/>
          </xsd:choice>
          <xsd:element ref="se:Opacity" minOccurs="0"/>
          <xsd:element ref="se:Width" minOccurs="0"/>
          <xsd:element ref="se:LineJoin" minOccurs="0"/>
          <xsd:element ref="se:LineCap" minOccurs="0"/>
          <xsd:element ref="se:DashArray" minOccurs="0"/>
          <xsd:element ref="se:DashOffset" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Color" type="se:ParameterValueType"/>
  <xsd:element name="Stipple" type="se:GraphicFillType"/>
  <xsd:element name="Opacity" type="se:ParameterValueType"/>
  <xsd:element name="Width" type="se:ParameterValueType"/>
  <xsd:element name="LineJoin" type="se:ParameterValueType"/>
  <xsd:element name="LineCap" type="se:ParameterValueType"/>
  <xsd:element name="DashArray" type="se:ParameterValueType"/>
  <xsd:element name="DashOffset" type="se:ParameterValueType"/>

  <!-- GraphicStroke -->
  <xsd:element name="GraphicStroke" type="se:GraphicStrokeType"
    substitutionGroup="se:Stroke">
    <xsd:annotation>
      <xsd:documentation>A "GraphicStroke" defines a repeated linear graphic pattern to be used for stroking a line.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="GraphicStrokeType">
    <xsd:complexContent>
      <xsd:extension base="se:StrokeType">
        <xsd:sequence>
          <xsd:element ref="se:Graphic"/>
          <xsd:element ref="se:Length" minOccurs="0"/>
          <xsd:element ref="se:RelativeOrientation" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
   </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Length" type="se:ParameterValueType"/>
  <xsd:element name="RelativeOrientation" type="se:RelativeOrientationType"/>
  <xsd:simpleType name="RelativeOrientationType">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="normal"/>
      <xsd:enumeration value="line"/>
      <xsd:enumeration value="portrayal"/>
      <xsd:enumeration value="normalUp"/>
    </xsd:restriction>
  </xsd:simpleType>

  <!-- TextStroke
  <xsd:element name="TextStroke" type="se:TextStrokeType"
    substitutionGroup="se:Stroke">
    <xsd:annotation>
      <xsd:documentation>A "TextStroke" defines a text label to plot along a line.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TextStrokeType">
    <xsd:complexContent>
      <xsd:extension base="se:StrokeType">
        <xsd:sequence>
          <xsd:element ref="se:LineLabel"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>-->

  <!-- CompoundStroke 
  <xsd:element name="CompoundStroke" type="se:CompoundStrokeType"
    substitutionGroup="se:Stroke">
    <xsd:annotation>
      <xsd:documentation>A "CompoundStroke" defines a mixed pattern of simple strokes and/or graphic strokes with gaps between them.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CompoundStrokeType">
    <xsd:complexContent>
      <xsd:extension base="se:StrokeType">
        <xsd:sequence>
          <xsd:element ref="se:PreGap" minOccurs="0"/>
          <xsd:choice maxOccurs="unbounded">
            <xsd:element ref="se:StrokeElement"/>
            <xsd:element ref="se:AlternativeStrokeElements"/>
          </xsd:choice>
          <xsd:element ref="se:PostGap" minOccurs="0"/>
          <xsd:element ref="se:StrokeAnnotationGraphic" minOccurs="0"
            maxOccurs="unbounded"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  -->

  <!--
  <xsd:element name="StrokeElement" type="se:StrokeElementType"/>
  <xsd:complexType name="StrokeElementType">
    <xsd:sequence>
      <xsd:choice>
        <xsd:element ref="se:Stroke"/>
      </xsd:choice>
      <xsd:element ref="se:Length" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:element name="AlternativeStrokeElements"
    type="se:AlternativeStrokeElementsType"/>
  <xsd:complexType name="AlternativeStrokeElementsType">
    <xsd:sequence>
      <xsd:element ref="se:StrokeElement" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:element name="StrokeAnnotationGraphic"
    type="se:StrokeAnnotationGraphicType"/>
  <xsd:complexType name="StrokeAnnotationGraphicType">
    <xsd:sequence>
      <xsd:element ref="se:Graphic" minOccurs="0"/>
      <xsd:element ref="se:RelativePosition" minOccurs="0"/>
      <xsd:element ref="se:RelativeOrientation" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="RelativePosition" type="se:ParameterValueType"/>
-->

  <!-- StrokeReference
  <xsd:element name="StrokeReference" type="se:StrokeReferenceType"
    substitutionGroup="se:Stroke">
    <xsd:annotation>
      <xsd:documentation>A "StrokeReference" imports a stroke from a remote resource.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="StrokeReferenceType">
    <xsd:complexContent>
      <xsd:extension base="se:StrokeType">
        <xsd:sequence>
          <xsd:element ref="se:OnlineResource"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>-->


  <!-- ********************************************************************* -->
  <xsd:annotation>
    <xsd:documentation>AREA Symbolizer</xsd:documentation>
  </xsd:annotation>
  <xsd:element name="AreaSymbolizer" type="se:AreaSymbolizerType"
    substitutionGroup="se:Symbolizer">
    <xsd:annotation>
      <xsd:documentation>A "AreaSymbolizer" specifies the rendering of a polygon or other area/surface geometry, including its interior fill and border stroke.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="AreaSymbolizerType">
    <xsd:complexContent>
      <xsd:extension base="se:SymbolizerType">
        <xsd:sequence>
          <xsd:element ref="se:Geometry" minOccurs="0"/>
          <xsd:element ref="se:UnitOfMeasure" minOccurs="0"/>
          <xsd:element ref="se:PerpendicularOffset" minOccurs="0"/>
          <xsd:element ref="se:Transform" minOccurs="0"/>
          <xsd:element ref="se:Fill" minOccurs="0"/>
          <xsd:element ref="se:Stroke" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ********************************************************************* -->
  <xsd:element name="Fill" type="se:FillType" abstract="true">
    <xsd:annotation>
      <xsd:documentation>A "Fill" collects the SolidFill, GraphicFill, and FillReference elements for specifying the appearance of an area geometry.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="FillType" abstract="true"/>

  <!-- SolidFill -->
  <xsd:element name="SolidFill" type="se:SolidFillType"
      substitutionGroup="se:Fill">
    <xsd:annotation>
      <xsd:documentation>A "SolidFill" specifies the color and opacity for the solid filling of the interior of an area geometry.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SolidFillType">
    <xsd:complexContent>
      <xsd:extension base="se:FillType">
        <xsd:sequence>
          <xsd:element ref="se:Color" minOccurs="0"/>
          <xsd:element ref="se:Opacity" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- DensityFill -->
  <xsd:element name="DensityFill" type="se:DensityFillType"
      substitutionGroup="se:Fill">
    <xsd:annotation>
      <xsd:documentation>A "DensityFill" specifies either hatches (PenStroke) or marks (Graphic) that are repeated whithin the area in order to cover a pre-defined percentage of the area</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DensityFillType">
    <xsd:complexContent>
      <xsd:extension base="se:FillType">
        <xsd:sequence>
          <xsd:choice>
            <xsd:sequence>
              <xsd:element ref="se:PenStroke" minOccurs="0"/>
              <xsd:element ref="se:Orientation" minOccurs="0"/>
            </xsd:sequence>
            <xsd:element ref="se:Graphic" minOccurs="0"/>
          </xsd:choice>
          <xsd:element ref="se:Percentage" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:element name="Percentage" type="se:ParameterValueType">
    <xsd:annotation>
      <xsd:documentation>Percentage of hatched/marked area [0;100]</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="Orientation" type="se:ParameterValueType">
    <xsd:annotation>
      <xsd:documentation>Clockwise orientation [0;360]</xsd:documentation>
    </xsd:annotation>
  </xsd:element>


  <!-- DotMapFill -->
  <xsd:element name="DotMapFill" type="se:DotMapFillType"
      substitutionGroup="se:Fill">
    <xsd:annotation>
      <xsd:documentation>A "DotMapFill" is used to repeat a computed number (= ValToRepresent/ValuePerMark)of mark within the area</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DotMapFillType">
    <xsd:complexContent>
      <xsd:extension base="se:FillType">
        <xsd:sequence>
          <xsd:element ref="se:Graphic" minOccurs="0"/>
          <xsd:element ref="se:ValuePerMark" minOccurs="0"/>
          <xsd:element ref="se:ValueToRepresent" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:element name="ValuePerMark" type="se:ParameterValueType">
    <xsd:annotation>
      <xsd:documentation>Specifies how many a single mark represent</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="ValueToRepresent" type="se:ParameterValueType">
    <xsd:annotation>
      <xsd:documentation>Specifies the total to represent. The number of mark to represent equals (int)(ValueToRepresent/ValuePerMark)</xsd:documentation>
    </xsd:annotation>
  </xsd:element>


  <!-- GraphicFill -->
  <xsd:element name="GraphicFill" type="se:GraphicFillType"
    substitutionGroup="se:Fill">
    <xsd:annotation>
      <xsd:documentation>A "GraphicFill" defines repeated-graphic filling (stippling) pattern for an area geometry.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="GraphicFillType">
    <xsd:complexContent>
      <xsd:extension base="se:FillType">
        <xsd:sequence>
          <xsd:element ref="se:UnitOfMeasure" minOccurs="0"/>
          <xsd:element ref="se:Graphic"/>
          <xsd:element ref="se:TileGap" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TileGap" type="se:TileGapType"/>
  <xsd:complexType name="TileGapType">
    <xsd:sequence>
      <xsd:element ref="se:X" minOccurs="0"/>
      <xsd:element ref="se:Y" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <!-- FillReference 
  <xsd:element name="FillReference" type="se:FillReferenceType"
    substitutionGroup="se:Fill">
    <xsd:annotation>
      <xsd:documentation>A "FillReference" imports a fill from a remote resource.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="FillReferenceType">
    <xsd:complexContent>
      <xsd:extension base="se:FillType">
        <xsd:sequence>
          <xsd:element ref="se:OnlineResource"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>-->

  <!-- ********************************************************************* -->
  <xsd:annotation>
    <xsd:documentation>POINT Symbolizer</xsd:documentation>
  </xsd:annotation>
  <xsd:element name="PointSymbolizer" type="se:PointSymbolizerType"
    substitutionGroup="se:Symbolizer">
    <xsd:annotation>
      <xsd:documentation>A "PointSymbolizer" specifies the rendering of a "graphic icon" at a point.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PointSymbolizerType">
    <xsd:complexContent>
      <xsd:extension base="se:SymbolizerType">
        <xsd:sequence>
          <xsd:element ref="se:Geometry" minOccurs="0"/>
          <xsd:element ref="se:UnitOfMeasure" minOccurs="0"/>
          <xsd:element ref="se:Transform" minOccurs="0"/>
          <xsd:element ref="se:Graphic"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ********************************************************************* -->
  <xsd:element name="Graphic" type="se:GraphicType" abstract="true">
    <xsd:annotation>
      <xsd:documentation>The "Graphic" abstract element collects the various kinds of graphic icons.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="GraphicType" abstract="true"/>

  <!-- ExternalGraphic -->
  <xsd:element name="ExternalGraphic" type="se:ExternalGraphicType"
    substitutionGroup="se:Graphic">
    <xsd:annotation>
      <xsd:documentation>An "ExternalGraphic" uses a graphic icon in an external format.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ExternalGraphicType">
    <xsd:complexContent>
      <xsd:extension base="se:GraphicType">
        <xsd:sequence>
          <xsd:choice>
            <xsd:element ref="se:OnlineResource"/>
            <!--<xsd:element ref="se:InlineContent"/>-->
          </xsd:choice>
          <xsd:element ref="se:Format"/>
          <xsd:element ref="se:UnitOfMeasure" minOccurs="0"/>
          <xsd:element ref="se:ViewBox" minOccurs="0"/>
          <xsd:element ref="se:Transform" minOccurs="0"/>
          <xsd:element ref="se:Opacity" minOccurs="0"/>
          <xsd:element ref="se:Halo" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Format" type="xsd:string"/>
  <xsd:element name="ViewBox" type="se:ViewBoxType"/>
  <xsd:complexType name="ViewBoxType">
    <xsd:sequence>
      <xsd:element ref="se:Width" minOccurs="0"/>
      <xsd:element ref="se:Height" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="Height" type="se:ParameterValueType"/>

  <!-- MarkGraphic -->
  <xsd:element name="MarkGraphic" type="se:MarkGraphicType"
    substitutionGroup="se:Graphic">
    <xsd:annotation>
      <xsd:documentation>A "MarkGraphic" uses a geometric surface or curve in some format and strokes and/or fills it to produce a graphic icon.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="MarkGraphicType">
    <xsd:complexContent>
      <xsd:extension base="se:GraphicType">
        <xsd:sequence>
          <xsd:choice minOccurs="0">
            <xsd:element ref="se:WellKnownName"/>
            <xsd:sequence>
              <xsd:choice>
                <xsd:element ref="se:OnlineResource"/>
                <xsd:element ref="se:InlineContent"/>
              </xsd:choice>
              <xsd:element ref="se:Format"/>
              <xsd:element ref="se:MarkIndex" minOccurs="0"/>
            </xsd:sequence>
          </xsd:choice>
          <xsd:element ref="se:UnitOfMeasure" minOccurs="0"/>
          <xsd:element ref="se:ViewBox" minOccurs="0"/>
          <xsd:element ref="se:PerpendicularOffset" minOccurs="0"/>
          <xsd:element ref="se:Transform" minOccurs="0"/>
          <xsd:element ref="se:Halo" minOccurs="0"/>
          <xsd:element ref="se:Fill" minOccurs="0"/>
          <xsd:element ref="se:Stroke" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="WellKnownName" type="xsd:string"/>
  <xsd:element name="MarkIndex" type="xsd:integer"/>

  <!-- TextGraphic -->
  <xsd:element name="TextGraphic" type="se:TextGraphicType"
    substitutionGroup="se:Graphic">
    <xsd:annotation>
      <xsd:documentation>A "PointTextGraphic" plots a text label at a given point.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TextGraphicType">
    <xsd:complexContent>
      <xsd:extension base="se:GraphicType">
        <xsd:sequence>
          <xsd:element ref="se:UnitOfMeasure" minOccurs="0"/>
          <xsd:element ref="se:Transform" minOccurs="0"/>
          <xsd:element ref="se:StyledLabel" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- AlternativeGraphics
  <xsd:element name="AlternativeGraphics" type="se:AlternativeGraphicsType"
    substitutionGroup="se:Graphic">
    <xsd:annotation>
      <xsd:documentation>An "AlternativeGraphics" element allows the selection of one graphic from a group of semantically eqivalent graphics in case some formats are not supported.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="AlternativeGraphicsType">
    <xsd:complexContent>
      <xsd:extension base="se:GraphicType">
        <xsd:sequence>
          <xsd:element ref="se:Graphic" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>-->

  <!-- CompositeGraphic -->
  <xsd:element name="CompositeGraphic" type="se:CompositeGraphicType"
    substitutionGroup="se:Graphic">
    <xsd:annotation>
      <xsd:documentation>A "CompositeGraphic" binds a group of individual graphics into a single composite graphic.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CompositeGraphicType">
    <xsd:complexContent>
      <xsd:extension base="se:GraphicType">
        <xsd:sequence>
          <xsd:element ref="se:GraphicElement" minOccurs="0"
            maxOccurs="unbounded"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:element name="GraphicElement" type="se:GraphicElementType"/>
  <xsd:complexType name="GraphicElementType">
    <xsd:sequence>
      <xsd:element ref="se:Graphic"/>
    </xsd:sequence>
  </xsd:complexType>

  <!-- GraphicReference 
  <xsd:element name="GraphicReference" type="se:GraphicReferenceType"
    substitutionGroup="se:Graphic">
    <xsd:annotation>
      <xsd:documentation>A "GraphicReference" refers to a remote SE Graphic XML document whose body is to be substituted in place of the reference when processed.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="GraphicReferenceType">
    <xsd:complexContent>
      <xsd:extension base="se:GraphicType">
        <xsd:sequence>
          <xsd:element ref="se:OnlineResource"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>-->

  <!-- ********************************************************************* -->
  <xsd:annotation>
    <xsd:documentation>TEXT Symbolizer</xsd:documentation>
  </xsd:annotation>
  <xsd:element name="TextSymbolizer" type="se:TextSymbolizerType"
    substitutionGroup="se:Symbolizer">
    <xsd:annotation>
      <xsd:documentation>A "TextSymbolizer" is used to render text labels according to various graphical parameters.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TextSymbolizerType">
    <xsd:complexContent>
      <xsd:extension base="se:SymbolizerType">
        <xsd:sequence>
          <xsd:element ref="se:Geometry" minOccurs="0"/>
          <xsd:element ref="se:UnitOfMeasure" minOccurs="0"/>
          <xsd:element ref="se:PerpendicularOffset" minOccurs="0"/>
          <xsd:element ref="se:Transform" minOccurs="0"/>
          <xsd:element ref="se:Label" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ********************************************************************* -->
  <xsd:element name="Label" type="se:LabelType" abstract="true">
    <xsd:annotation>
      <xsd:documentation>An "Label" collects PointLabel and LineLabel for specifying the appearance of a text label.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LabelType" abstract="true"/>

  <!-- PointLabel -->
  <xsd:element name="PointLabel" type="se:PointLabelType"
    substitutionGroup="se:Label"/>
  <xsd:complexType name="PointLabelType">
    <xsd:complexContent>
      <xsd:extension base="se:LabelType">
        <xsd:sequence>
          <xsd:element ref="se:UnitOfMeasure" minOccurs="0"/>
          <xsd:element ref="se:StyledLabel" minOccurs="0"/>
          <xsd:element ref="se:HorizontalAlignment" minOccurs="0"/>
          <xsd:element ref="se:VerticalAlignment" minOccurs="0"/>
          <xsd:element ref="se:Rotation" minOccurs="0"/>
          <xsd:element ref="se:ExclusionZone" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- LineLabel -->
  <xsd:element name="LineLabel" type="se:LineLabelType"
    substitutionGroup="se:Label"/>
  <xsd:complexType name="LineLabelType">
    <xsd:complexContent>
      <xsd:extension base="se:LabelType">
        <xsd:sequence>
          <xsd:element ref="se:UnitOfMeasure" minOccurs="0"/>
          <xsd:element ref="se:StyledLabel" minOccurs="0"/>
          <xsd:element ref="se:HorizontalAlignment" minOccurs="0"/>
          <xsd:element ref="se:VerticalAlignment" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>


  <!-- StyledLabel -->
  <xsd:element name="StyledLabel" type="se:StyledLabelType" />
  <xsd:complexType name="StyledLabelType">
    <xsd:sequence>
      <xsd:element ref="se:LabelText" minOccurs="0"/>
      <xsd:element ref="se:Font" minOccurs="0"/>
      <xsd:element ref="se:Halo" minOccurs="0"/>
      <xsd:element ref="se:Fill" minOccurs="0"/>
      <xsd:element ref="se:Stroke" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>


  <xsd:element name="LabelText" type="se:ParameterValueType"/>
  <xsd:element name="Font" type="se:FontType"/>
  <xsd:complexType name="FontType">
    <xsd:sequence>
      <xsd:element ref="se:UnitOfMeasure" minOccurs="0"/>
      <xsd:element ref="se:FontFamily" minOccurs="0"/>
      <xsd:element ref="se:FontStyle" minOccurs="0"/>
      <xsd:element ref="se:FontWeight" minOccurs="0"/>
      <xsd:element ref="se:FontSize" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="FontFamily" type="se:ParameterValueType"/>
  <xsd:element name="FontStyle" type="se:ParameterValueType"/> <!-- enumeration -->
  <xsd:element name="FontWeight" type="se:ParameterValueType"/> <!-- enumeration -->
  <xsd:element name="FontSize" type="se:ParameterValueType"/> 
  <xsd:element name="HorizontalAlignment" type="se:ParameterValueType"/> <!-- enum -->
  <xsd:element name="VerticalAlignment" type="se:ParameterValueType"/> <!-- enum -->
  <xsd:element name="Rotation" type="se:ParameterValueType"/>
  <xsd:element name="ExclusionZone" type="se:ExclusionZoneType"
    abstract="true"/>
  <xsd:complexType name="ExclusionZoneType" abstract="true"/>
  <xsd:element name="ExclusionRadius" type="se:ExclusionRadiusType"
    substitutionGroup="se:ExclusionZone"/>
  <xsd:complexType name="ExclusionRadiusType">
    <xsd:complexContent>
      <xsd:extension base="se:ExclusionZoneType">
        <xsd:sequence>
          <xsd:element ref="se:UnitOfMeasure" minOccurs="0"/>
          <xsd:element ref="se:Radius"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Radius" type="se:ParameterValueType"/>
  <xsd:element name="ExclusionRectangle" type="se:ExclusionRectangleType"
    substitutionGroup="se:ExclusionZone"/>
  <xsd:complexType name="ExclusionRectangleType">
    <xsd:complexContent>
      <xsd:extension base="se:ExclusionZoneType">
        <xsd:sequence>
          <xsd:element ref="se:UnitOfMeasure" minOccurs="0"/>
          <xsd:element ref="se:X"/>
          <xsd:element ref="se:Y"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Halo" type="se:HaloType"/>
  <xsd:complexType name="HaloType">
    <xsd:sequence>
      <xsd:element ref="se:UnitOfMeasure" minOccurs="0"/>
      <xsd:element ref="se:Radius" minOccurs="0"/>
      <xsd:element ref="se:Fill" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <!-- ********************************************************************* -->
  <xsd:annotation>
    <xsd:documentation>RASTER Symbolizer</xsd:documentation>
  </xsd:annotation>
  <xsd:element name="RasterSymbolizer" type="se:RasterSymbolizerType"
    substitutionGroup="se:Symbolizer">
    <xsd:annotation>
      <xsd:documentation>A "RasterSymbolizer" is used to specify the rendering of raster/matrix-coverage data (e.g., satellite images, DEMs).</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RasterSymbolizerType">
    <xsd:complexContent>
      <xsd:extension base="se:SymbolizerType">
        <xsd:sequence>
          <xsd:element ref="se:Geometry" minOccurs="0"/>
          <xsd:element ref="se:UnitOfMeasure" minOccurs="0"/>
          <xsd:element ref="se:Opacity" minOccurs="0"/>
          <xsd:element ref="se:ChannelSelection" minOccurs="0"/>
          <xsd:element ref="se:OverlapBehavior" minOccurs="0"/>
          <xsd:element ref="se:ColorMap" minOccurs="0"/>
          <xsd:element ref="se:ContrastEnhancement" minOccurs="0"/>
          <xsd:element ref="se:ShadedRelief" minOccurs="0"/>
          <xsd:element ref="se:ImageOutline" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ChannelSelection" type="se:ChannelSelectionType">
    <xsd:annotation>
      <xsd:documentation>"ChannelSelection" specifies the false-color channel selection for a multi-spectral raster source.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ChannelSelectionType">
    <xsd:choice>
      <xsd:sequence>
        <xsd:element ref="se:RedChannel"/>
        <xsd:element ref="se:GreenChannel"/>
        <xsd:element ref="se:BlueChannel"/>
      </xsd:sequence>
      <xsd:element ref="se:GrayChannel"/>
    </xsd:choice>
  </xsd:complexType>
  <xsd:element name="RedChannel" type="se:SelectedChannelType"/>
  <xsd:element name="GreenChannel" type="se:SelectedChannelType"/>
  <xsd:element name="BlueChannel" type="se:SelectedChannelType"/>
  <xsd:element name="GrayChannel" type="se:SelectedChannelType"/>
  <xsd:complexType name="SelectedChannelType">
    <xsd:sequence>
      <xsd:element ref="se:SourceChannelName"/>
      <xsd:element ref="se:ContrastEnhancement" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="SourceChannelName" type="xsd:string"/>
  <xsd:element name="OverlapBehavior">
    <xsd:annotation>
      <xsd:documentation>"OverlapBehavior" tells a system how to behave when multiple raster images in a layer overlap each other, for example with satellite-image scenes.</xsd:documentation>
    </xsd:annotation>
    <xsd:simpleType>
      <xsd:restriction base="xsd:string">
        <xsd:enumeration value="LATEST_ON_TOP"/>
        <xsd:enumeration value="EARLIEST_ON_TOP"/>
        <xsd:enumeration value="AVERAGE"/>
        <xsd:enumeration value="RANDOM"/>
      </xsd:restriction>
    </xsd:simpleType>
  </xsd:element>
  <xsd:element name="ColorMap" type="se:ColorMapType">
    <xsd:annotation>
      <xsd:documentation>A "ColorMap" defines either the colors of a pallette-type raster source or the mapping of numeric pixel values to colors.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ColorMapType">
    <xsd:choice>
      <xsd:element ref="se:Categorize"/>
      <xsd:element ref="se:Interpolate"/>
    </xsd:choice>
  </xsd:complexType>
  <xsd:element name="ContrastEnhancement" type="se:ContrastEnhancementType">
    <xsd:annotation>
      <xsd:documentation>"ContrastEnhancement" defines the 'stretching' of contrast for a channel of a false-color image or for a whole grey/color image.  Contrast enhancement is used to make ground features in images more visible.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ContrastEnhancementType">
    <xsd:sequence>
      <xsd:choice minOccurs="0">
        <xsd:element ref="se:Normalize"/>
        <xsd:element ref="se:Histogram"/>
      </xsd:choice>
      <xsd:element ref="se:GammaValue" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="Normalize" type="se:NormalizeType"/>
  <xsd:complexType name="NormalizeType"/>
  <xsd:element name="Histogram" type="se:HistogramType"/>
  <xsd:complexType name="HistogramType"/>
  <xsd:element name="GammaValue" type="xsd:double"/>
  <xsd:element name="ShadedRelief" type="se:ShadedReliefType">
    <xsd:annotation>
      <xsd:documentation>"ShadedRelief" specifies the application of relief shading (or "hill shading") to a DEM raster to give it somewhat of a three-dimensional effect and to make elevation changes more visible.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ShadedReliefType">
    <xsd:sequence>
      <xsd:element ref="se:BrightnessOnly" minOccurs="0"/>
      <xsd:element ref="se:ReliefFactor" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="BrightnessOnly" type="xsd:boolean"/>
  <xsd:element name="ReliefFactor" type="xsd:double"/>
  <xsd:element name="ImageOutline" type="se:ImageOutlineType">
    <xsd:annotation>
      <xsd:documentation>"ImageOutline" specifies how individual source rasters in a multi-raster set (such as a set of satellite-image scenes) should be outlined to make the individual-image locations visible.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ImageOutlineType">
    <xsd:choice>
      <!--<xsd:element ref="se:LineSymbolizer"/>-->
      <xsd:element ref="se:AreaSymbolizer"/>
    </xsd:choice>
  </xsd:complexType>
</xsd:schema>
